// <auto-generated />
using System;
using JobScraper.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobScraper.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241216145427_ProtectedWebsite")]
    partial class ProtectedWebsite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobListingSearchTerm", b =>
                {
                    b.Property<int>("JobListingsId")
                        .HasColumnType("integer");

                    b.Property<int>("SearchTermsId")
                        .HasColumnType("integer");

                    b.HasKey("JobListingsId", "SearchTermsId");

                    b.HasIndex("SearchTermsId");

                    b.ToTable("JobListingSearchTerm");
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Zip")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.JobListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ScrapedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WebsiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("JobListings");
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.ScrapingError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ErrorType")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ScrapingErrors");
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.SearchTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MatchingJobsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("SearchTerms");
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.Website", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastScraped")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("ScrapingErrorWebsite", b =>
                {
                    b.Property<int>("ScrapingErrorsId")
                        .HasColumnType("integer");

                    b.Property<int>("WebsitesId")
                        .HasColumnType("integer");

                    b.HasKey("ScrapingErrorsId", "WebsitesId");

                    b.HasIndex("WebsitesId");

                    b.ToTable("ScrapingErrorWebsite");
                });

            modelBuilder.Entity("SearchTermWebsite", b =>
                {
                    b.Property<int>("SearchTermsId")
                        .HasColumnType("integer");

                    b.Property<int>("WebsitesId")
                        .HasColumnType("integer");

                    b.HasKey("SearchTermsId", "WebsitesId");

                    b.HasIndex("WebsitesId");

                    b.ToTable("SearchTermWebsite");
                });

            modelBuilder.Entity("JobListingSearchTerm", b =>
                {
                    b.HasOne("JobScraper.Domain.Entities.JobListing", null)
                        .WithMany()
                        .HasForeignKey("JobListingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobScraper.Domain.Entities.SearchTerm", null)
                        .WithMany()
                        .HasForeignKey("SearchTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.JobListing", b =>
                {
                    b.HasOne("JobScraper.Domain.Entities.City", "City")
                        .WithMany("JobListings")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobScraper.Domain.Entities.Website", "Website")
                        .WithMany("JobsListings")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("ScrapingErrorWebsite", b =>
                {
                    b.HasOne("JobScraper.Domain.Entities.ScrapingError", null)
                        .WithMany()
                        .HasForeignKey("ScrapingErrorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobScraper.Domain.Entities.Website", null)
                        .WithMany()
                        .HasForeignKey("WebsitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchTermWebsite", b =>
                {
                    b.HasOne("JobScraper.Domain.Entities.SearchTerm", null)
                        .WithMany()
                        .HasForeignKey("SearchTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobScraper.Domain.Entities.Website", null)
                        .WithMany()
                        .HasForeignKey("WebsitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.City", b =>
                {
                    b.Navigation("JobListings");
                });

            modelBuilder.Entity("JobScraper.Domain.Entities.Website", b =>
                {
                    b.Navigation("JobsListings");
                });
#pragma warning restore 612, 618
        }
    }
}
